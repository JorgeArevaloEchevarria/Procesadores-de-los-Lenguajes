/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package asint;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {

  final public void Prog() throws ParseException {
    Decs();
    SecIs();
  }

  final public void Decs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case proc:
    case var:
    case type:
      LDecs();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public void LDecs() throws ParseException {
    Dec();
    RLDecs();
  }

  final public void RLDecs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case proc:
    case var:
    case type:
      Dec();
      RLDecs();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void Dec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case var:
      DecVar();
      break;
    case type:
      DecTipo();
      break;
    case proc:
      DecProc();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DecVar() throws ParseException {
    jj_consume_token(var);
    jj_consume_token(id);
    jj_consume_token(dosPuntos);
    Tipo();
    jj_consume_token(puntoYComa);
  }

  final public void DecTipo() throws ParseException {
    jj_consume_token(type);
    jj_consume_token(id);
    jj_consume_token(dosPuntos);
    Tipo();
    jj_consume_token(puntoYComa);
  }

  final public void DecProc() throws ParseException {
    jj_consume_token(proc);
    jj_consume_token(id);
    jj_consume_token(parApertura);
    PForms();
    jj_consume_token(parCierre);
    Decs();
    SecIs();
  }

  final public void PForms() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case var:
    case id:
      LPForms();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void LPForms() throws ParseException {
    ParamFormal();
    RLPForms();
  }

  final public void RLPForms() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case coma:
      jj_consume_token(coma);
      ParamFormal();
      RLPForms();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void ParamFormal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case var:
      jj_consume_token(var);
      jj_consume_token(id);
      jj_consume_token(dosPuntos);
      Tipo();
      break;
    case id:
      jj_consume_token(id);
      jj_consume_token(dosPuntos);
      Tipo();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case intKW:
    case real:
    case bool:
    case string:
      TipoBase();
      break;
    case array:
      TipoArray();
      break;
    case record:
      TipoReg();
      break;
    case indireccion:
      TipoPunt();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TipoBase() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case intKW:
      jj_consume_token(intKW);
      break;
    case real:
      jj_consume_token(real);
      break;
    case bool:
      jj_consume_token(bool);
      break;
    case string:
      jj_consume_token(string);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TipoArray() throws ParseException {
    jj_consume_token(array);
    jj_consume_token(corApertura);
    jj_consume_token(enteros);
    jj_consume_token(corCierre);
    jj_consume_token(of);
    TipoBase();
  }

  final public void TipoReg() throws ParseException {
    jj_consume_token(record);
    Campos();
    jj_consume_token(end);
  }

  final public void TipoPunt() throws ParseException {
    jj_consume_token(indireccion);
    TipoBase();
  }

  final public void Campos() throws ParseException {
    Campo();
    RCampos();
  }

  final public void RCampos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      Campo();
      RCampos();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  final public void Campo() throws ParseException {
    jj_consume_token(id);
    jj_consume_token(dosPuntos);
    Tipo();
    jj_consume_token(puntoYComa);
  }

  final public void SecIs() throws ParseException {
    jj_consume_token(begin);
    Is();
    jj_consume_token(end);
  }

  final public void Is() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case parApertura:
    case resta:
    case not:
    case nullKW:
    case trueKW:
    case falseKW:
    case ifKW:
    case whileKW:
    case seq:
    case newKW:
    case delete:
    case read:
    case write:
    case nl:
    case cadena:
    case id:
    case enteros:
    case reales:
      LIs();
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

  final public void LIs() throws ParseException {
    I();
    RLIs();
  }

  final public void RLIs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case parApertura:
    case resta:
    case not:
    case nullKW:
    case trueKW:
    case falseKW:
    case ifKW:
    case whileKW:
    case seq:
    case newKW:
    case delete:
    case read:
    case write:
    case nl:
    case cadena:
    case id:
    case enteros:
    case reales:
      I();
      RLIs();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  final public void I() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case parApertura:
    case resta:
    case not:
    case nullKW:
    case trueKW:
    case falseKW:
    case cadena:
    case id:
    case enteros:
    case reales:
      IAsigOLlamada();
      break;
    case ifKW:
      IAlternativa();
      break;
    case whileKW:
      Iwhile();
      break;
    case read:
      Iread();
      break;
    case write:
      Iwrite();
      break;
    case nl:
      Inl();
      break;
    case newKW:
      Inew();
      break;
    case delete:
      Idelete();
      break;
    case seq:
      Iseq();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case puntoYComa:
      jj_consume_token(puntoYComa);
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  final public void IAlternativa() throws ParseException {
    jj_consume_token(ifKW);
    Exp();
    jj_consume_token(then);
    Is();
    RAlternativa();
  }

  final public void RAlternativa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case end:
      jj_consume_token(end);
      TO();
      break;
    case elseKW:
      jj_consume_token(elseKW);
      Is();
      jj_consume_token(end);
      TO();
      break;
    default:
      jj_la1[13] = jj_gen;

    }
  }

  final public void Iwhile() throws ParseException {
    jj_consume_token(whileKW);
    Exp();
    jj_consume_token(doKW);
    Is();
    jj_consume_token(end);
  }

  final public void Iread() throws ParseException {
    jj_consume_token(read);
    Exp();
  }

  final public void Iwrite() throws ParseException {
    jj_consume_token(write);
    Exp();
  }

  final public void Inl() throws ParseException {
    jj_consume_token(nl);
  }

  final public void Inew() throws ParseException {
    jj_consume_token(newKW);
    Exp();
  }

  final public void Idelete() throws ParseException {
    jj_consume_token(delete);
    Exp();
  }

  final public void IAsigOLlamada() throws ParseException {
    Exp();
    RAsigOLlamada();
  }

  final public void RAsigOLlamada() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case igual:
      jj_consume_token(igual);
      Exp();
      break;
    case parApertura:
      jj_consume_token(parApertura);
      PReales();
      jj_consume_token(parCierre);
      break;
    default:
      jj_la1[14] = jj_gen;

    }
  }

  final public void PReales() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case parApertura:
    case resta:
    case not:
    case nullKW:
    case trueKW:
    case falseKW:
    case cadena:
    case id:
    case enteros:
    case reales:
      LPReales();
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

  final public void LPReales() throws ParseException {
    Exp();
    RLPReales();
  }

  final public void RLPReales() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case coma:
      jj_consume_token(coma);
      Exp();
      RLPReales();
      break;
    default:
      jj_la1[16] = jj_gen;

    }
  }

  final public void Iseq() throws ParseException {
    jj_consume_token(seq);
    Decs();
    SecIs();
    TO();
  }

  final public void OpBinRel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case menor:
      jj_consume_token(menor);
      break;
    case mayor:
      jj_consume_token(mayor);
      break;
    case menorIgual:
      jj_consume_token(menorIgual);
      break;
    case mayorIgual:
      jj_consume_token(mayorIgual);
      break;
    case igualdad:
      jj_consume_token(igualdad);
      break;
    case distinto:
      jj_consume_token(distinto);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OpBinMas() throws ParseException {
    jj_consume_token(suma);
  }

  final public void OpBinMenos() throws ParseException {
    jj_consume_token(resta);
  }

  final public void OpBinAnd() throws ParseException {
    jj_consume_token(and);
  }

  final public void OpBinOr() throws ParseException {
    jj_consume_token(or);
  }

  final public void OpBin3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mul:
      jj_consume_token(mul);
      break;
    case div:
      jj_consume_token(div);
      break;
    case mod:
      jj_consume_token(mod);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OpUn4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case resta:
      jj_consume_token(resta);
      break;
    case not:
      jj_consume_token(not);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Exp() throws ParseException {
    E0();
  }

  final public void E0() throws ParseException {
    E1();
    RE0();
  }

  final public void RE0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mayor:
    case menor:
    case mayorIgual:
    case menorIgual:
    case distinto:
    case igualdad:
      OpBinRel();
      E1();
      break;
    default:
      jj_la1[20] = jj_gen;

    }
  }

  final public void E1() throws ParseException {
    E2();
    RE10();
    RE11();
  }

  final public void RE10() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case suma:
      OpBinMas();
      E2();
      break;
    default:
      jj_la1[21] = jj_gen;

    }
  }

  final public void RE11() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case resta:
      OpBinMenos();
      E2();
      RE11();
      break;
    default:
      jj_la1[22] = jj_gen;

    }
  }

  final public void E2() throws ParseException {
    E3();
    RE2();
  }

  final public void RE2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case and:
      OpBinAnd();
      E3();
      break;
    case or:
      OpBinOr();
      E2();
      break;
    default:
      jj_la1[23] = jj_gen;

    }
  }

  final public void E3() throws ParseException {
    E4();
    RE3();
  }

  final public void RE3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mul:
    case div:
    case mod:
      OpBin3();
      E4();
      RE3();
      break;
    default:
      jj_la1[24] = jj_gen;

    }
  }

  final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case resta:
    case not:
      OpUn4();
      E4();
      break;
    case parApertura:
    case nullKW:
    case trueKW:
    case falseKW:
    case cadena:
    case id:
    case enteros:
    case reales:
      E5();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E5() throws ParseException {
    E6();
    RE5();
  }

  final public void RE5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case corApertura:
      jj_consume_token(corApertura);
      E0();
      jj_consume_token(corCierre);
      RE5();
      break;
    case punto:
      jj_consume_token(punto);
      jj_consume_token(id);
      RE5();
      break;
    case indireccion:
      jj_consume_token(indireccion);
      RE5();
      break;
    default:
      jj_la1[26] = jj_gen;

    }
  }

  final public void E6() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      jj_consume_token(id);
      break;
    case enteros:
      jj_consume_token(enteros);
      break;
    case reales:
      jj_consume_token(reales);
      break;
    case cadena:
      jj_consume_token(cadena);
      break;
    case trueKW:
      jj_consume_token(trueKW);
      break;
    case falseKW:
      jj_consume_token(falseKW);
      break;
    case nullKW:
      jj_consume_token(nullKW);
      break;
    case parApertura:
      jj_consume_token(parApertura);
      E0();
      jj_consume_token(parCierre);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x2080200,0x2080200,0x2080200,0x4000,0x0,0x20200,0x2080200,0x8000,0xfc000000,0x700000,0x2080000,0xfc000000,0x40000,0x80000,0x1800000,0x700000,0x2080200,0x2800,0x200,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x6000100,0x6000100,0x6000100,0x22000000,0x0,0x22000000,0x6001f,0x1e,0x20000000,0xf1f052e0,0xf1f052e0,0xf1f052e0,0x0,0x10800,0x0,0xf00000e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf00000e0,0x1,0xf00000e0,};
   }

  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[64];
    for (int i = 0; i < 64; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

                                       }
