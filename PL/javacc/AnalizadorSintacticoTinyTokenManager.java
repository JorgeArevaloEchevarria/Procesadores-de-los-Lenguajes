/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyTokenManager.java */
package asint;

public class AnalizadorSintacticoTinyTokenManager implements AnalizadorSintacticoTinyConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fffffe03800000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 0;
            return 25;
         }
         if ((active0 & 0xc0000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x108220001000000L) != 0L)
            return 25;
         if ((active0 & 0x6f7ddfe02800000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
            return 25;
         }
         return -1;
      case 2:
         if ((active0 & 0x4e69dfc00000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 25;
         }
         if ((active0 & 0x211400202800000L) != 0L)
            return 25;
         return -1;
      case 3:
         if ((active0 & 0xa6909000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
            return 25;
         }
         if ((active0 & 0x4400d6c00000000L) != 0L)
            return 25;
         return -1;
      case 4:
         if ((active0 & 0x84908000000000L) != 0L)
            return 25;
         if ((active0 & 0x22001000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 25;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 37:
         return jjStopAtPos(0, 22);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 20);
      case 43:
         return jjStartNfaWithStates_0(0, 18, 2);
      case 44:
         return jjStopAtPos(0, 15);
      case 45:
         return jjStartNfaWithStates_0(0, 19, 2);
      case 46:
         return jjStopAtPos(0, 13);
      case 47:
         return jjStopAtPos(0, 21);
      case 58:
         return jjStopAtPos(0, 16);
      case 59:
         return jjStopAtPos(0, 14);
      case 60:
         {
         jjmatchedKind = 27;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 61:
         {
         jjmatchedKind = 17;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 62:
         {
         jjmatchedKind = 26;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 94:
         return jjStopAtPos(0, 32);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000000800000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800800000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20200000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1080000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20200000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x110002002000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000001000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x42000400000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x401000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x400044000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80100000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200008000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x72c00400000000L);
      case 102:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 25);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 25);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000000000L);
      case 108:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 25);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000200800000L);
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 25);
         return jjMoveStringLiteralDfa2_0(active0, 0x802000000L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 25);
         return jjMoveStringLiteralDfa2_0(active0, 0x84014000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000400000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 25);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 25);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80100000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000a000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L);
      case 113:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 25);
         break;
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 25);
         return jjMoveStringLiteralDfa3_0(active0, 0x4001000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 25);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 25);
         break;
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 119:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 99:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 25);
         break;
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 25);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 25);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 25);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x801000000000L);
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 25);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 25);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 25);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 25);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 25);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 25);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 25);
         break;
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 25);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 121:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 25);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 25);
         break;
      case 103:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  break;
               case 25:
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(7);
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x100002700L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjAddStates(4, 5);
                  else if (curChar == 48)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddTwoStates(9, 14);
                  }
                  break;
               case 1:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(4);
                  break;
               case 8:
                  if (curChar != 48)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(9, 14);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 13);
                  break;
               case 11:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 48 && kind > 63)
                     kind = 63;
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAddStates(6, 9);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if ((0x3fe000000000000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 13);
                  break;
               case 21:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(0, 3);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(7);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(6);
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(7);
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 24, 9, 14, 2, 3, 15, 16, 17, 18, 24, 9, 14, 10, 11, 13, 
   20, 21, 13, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\50", "\51", "\133", 
"\135", "\56", "\73", "\54", "\72", "\75", "\53", "\55", "\52", "\57", "\45", 
"\141\156\144", "\157\162", "\156\157\164", "\76", "\74", "\76\75", "\74\75", "\41\75", 
"\75\75", "\136", "\151\156\164", "\162\145\141\154", "\142\157\157\154", 
"\163\164\162\151\156\147", "\156\165\154\154", "\164\162\165\145", "\146\141\154\163\145", 
"\160\162\157\143", "\151\146", "\164\150\145\156", "\145\154\163\145", "\167\150\151\154\145", 
"\144\157", "\163\145\161", "\142\145\147\151\156", "\145\156\144", 
"\162\145\143\157\162\144", "\141\162\162\141\171", "\157\146", "\156\145\167", 
"\144\145\154\145\164\145", "\162\145\141\144", "\167\162\151\164\145", "\156\154", "\166\141\162", 
"\164\171\160\145", null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xf7fffffffffffe01L, 0x0L, 
};
static final long[] jjtoSkip = {
   0x800000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[25];
private final int[] jjstateSet = new int[50];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public AnalizadorSintacticoTinyTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AnalizadorSintacticoTinyTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 25; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   jjmatchedKind = 60;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

int[] jjemptyLineNo = new int[1];
int[] jjemptyColNo = new int[1];
boolean[] jjbeenHere = new boolean[1];
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 23 :
         break;
      case 24 :
         break;
      case 25 :
         break;
      case 26 :
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 30 :
         break;
      case 31 :
         break;
      case 32 :
         break;
      case 33 :
         break;
      case 34 :
         break;
      case 35 :
         break;
      case 36 :
         break;
      case 37 :
         break;
      case 38 :
         break;
      case 39 :
         break;
      case 40 :
         break;
      case 41 :
         break;
      case 42 :
         break;
      case 43 :
         break;
      case 44 :
         break;
      case 45 :
         break;
      case 46 :
         break;
      case 47 :
         break;
      case 48 :
         break;
      case 49 :
         break;
      case 50 :
         break;
      case 51 :
         break;
      case 52 :
         break;
      case 53 :
         break;
      case 54 :
         break;
      case 55 :
         break;
      case 56 :
         break;
      case 57 :
         break;
      case 58 :
         break;
      case 60 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() && 
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 61 :
         break;
      case 62 :
         break;
      case 63 :
         break;
      default : 
         break;
   }
}
}
